#include "harness.test.vil"
#include "../strlib.vil"

fn main() {
    start_tests();

    print_title("str.num()");

    print_section("Basic Usage - No Base Parameter");
    log_case("Positive Integer", str.num(10), "10");
    log_case("Negative Integer", str.num(-10), "-10");
    log_case("Zero", str.num(0), "0");
    print_cases();
    
    print_section("Basic Usage - Base 8");
    log_case("Positive Integer (below base)", str.num(7,8), "7");
    log_case("Positive Integer (above base)", str.num(10,8), "12");
    log_case("Negative Integer (below base)", str.num(-7,8), "-7");
    log_case("Negative Integer (above base)", str.num(-10,8), "-12");
    log_case("Zero", str.num(0), "0");
    print_cases();
    
    print_section("Basic Usage - Base 16");
    log_case("Positive Integer (below base)", str.num(8,16), "8");
    log_case("Positive Integer (above base)", str.num(31,16), "1f");
    log_case("Negative Integer (below base)", str.num(-8,16), "-8");
    log_case("Negative Integer (above base)", str.num(-31,16), "-1f");
    log_case("Zero", str.num(0), "0");
    print_cases();
    
    print_section("Edge Cases - Value Parameter");
    log_case("Decimal", str.num(7/3), "2");
    log_case("Infinity", str.num(Infinity), nil);
    log_case("nil", str.num(nil), nil);
    log_case("Non-number", str.num("abc"), nil);
    print_cases();
    
    print_section("Edge Cases - Base Parameter");
    log_case("Decimal", str.num(10,7/3), "1010");
    log_case("Infinity", str.num(10,Infinity), nil);
    log_case("nil", str.num(10,nil), nil);
    log_case("Non-number", str.num(10,"abc"), nil);
    log_case("One", str.num(10,1), nil);
    log_case("Zero", str.num(10,0), nil);
    log_case("Negative", str.num(10,-1), nil);
    print_cases();


    
    print_title("str.repl()");

    print_section("Basic Usage");
    log_case("Single Character Replacement", str.repl("abcd","a","b"), "bbcd");
    log_case("Multi Character Replacement", str.repl("abcd","ab","bc"), "bccd");
    log_case("Multi-Occurrence Replacement", str.repl("ababab","ab","bc"), "bcbcbc");
    log_case("Empty String Replacement", str.repl("abcd","a",""), "bcd");
    print_cases();

    print_section("Edge Cases");
    log_case("Empty String", str.repl("", "a", "b"), "");
    log_case("Empty Pattern", str.repl("a", "", "b"), "a");
    log_case("Non-String Base", str.repl(123, "a", "b"), nil);
    log_case("Non-String Pattern", str.repl("a", 123, "b"), nil);
    log_case("Non-String Replacement", str.repl("abc", "a", 123), "123bc");
    print_cases();


    
    print_title("str.count()");

    print_section("Basic Usage");
    log_case("Single Character", str.cnt("abcd","a"), 1);
    log_case("Multi-Character", str.cnt("abcd","ab"), 1);
    log_case("Multi-Occurrence Single Character", str.cnt("ababab","a"), 3);
    log_case("Multi-Occurrence Multi-Character", str.cnt("ababab","ab"), 3);
    print_cases();

    print_section("Edge Cases");
    log_case("Empty String", str.cnt("","a"), 0);
    log_case("Empty Pattern", str.cnt("abcd",""), 0);
    log_case("Non-String Base", str.cnt(123,"a"), nil);
    log_case("Non-String Pattern", str.cnt("abcd",123), nil);
    print_cases();


    
    print_title("str.enc.b64enc()");

    print_section("Basic Usage");
    log_case("Modulo 3-Length String", str.enc.b64enc("b64enc"), "YjY0ZW5j");
    log_case("Arbitrary String", str.enc.b64enc("b64encpads"), "YjY0ZW5jcGFkcw==");
    log_case("Long String", str.enc.b64enc("This is some long random string to test some EVIL stuff."), "VGhpcyBpcyBzb21lIGxvbmcgcmFuZG9tIHN0cmluZyB0byB0ZXN0IHNvbWUgRVZJTCBzdHVmZi4=");
    print_cases();

    print_section("Edge Cases");
    log_case("Empty String", str.enc.b64enc(""), "");
    log_case("Non-String", str.enc.b64enc(123), nil);
    print_cases();


    
    print_title("str.enc.b64dec()");

    print_section("Basic Usage");
    log_case("Modulo 3-Length String", str.enc.b64dec("YjY0ZW5j"), "b64enc");
    log_case("Padded String", str.enc.b64dec("YjY0ZW5jcGFkcw=="), "b64encpads");
    print_cases();

    print_section("Edge Cases");
    log_case("Non-explicit Padded String", str.enc.b64dec("YjY0ZW5jcGFkcw"), "b64encpads");
    log_case("Empty String", str.enc.b64dec(""), "");
    log_case("Non-String", str.enc.b64dec(123), nil);
    print_cases();

    end_tests();
}