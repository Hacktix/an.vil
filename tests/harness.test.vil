fn print_title(title) {
    io.println();
    io.println(str.color.rgb("========== " + title + " ==========",0,255,0));
    io.println();
}

fn start_tests() {
    __total_tests ??= {
        total: 0,
        failed: 0
    };
}

fn end_tests() {
    rw val r = 0;
    rw val g = 200;
    if(__total_tests.failed > 0) {
        r = 200;
        g = 0;
    }

    io.println(str.color.rgb("==========================================",r,g,0));
    io.println(str.color.rgb("# ALL TESTS COMPLETED",r,g,0));
    io.println(str.color.rgb("==========================================",r,g,0));

    if(__total_tests.failed == 0) io.println(str.color.rgb("# All tests completed successfully.",r,g,0));
    else io.println(str.color.rgb("# Failed " + @__total_tests.failed + " out of " + @__total_tests.total + " cases",r,g,0));

    io.println(str.color.rgb("==========================================",r,g,0));
    io.println();
}

fn print_section(section) {
    io.println(str.color.rgb(" > " + section,200,200,0));
}

fn log_case(case, result, expected) {
    __logged_test_cases ??= array(0);
    __total_tests.total++;
    arr.push(__logged_test_cases, {case: case, result: result, expected: expected});
}

fn print_cases() {
    rw val pad_target_len = 0;
    each(rw val _,c : __logged_test_cases) {
        if(pad_target_len < #c.case)
            pad_target_len = #c.case;
    }
    
    rw val passed = 0;
    each(rw val i,c : __logged_test_cases) {
        val title = str.rpad(c.case, " ", pad_target_len);
        io.print("  * " + title + " -> ");
        if(equals(c.result, c.expected)) {
            io.println("Passed!");
            passed++;
        }
        else {
            io.println("Failed! Expected " + @c.expected + " but got " + @c.result);
            __total_tests.failed++;
        }
    }
    io.println(str.color.rgb(" >> Passed " + @passed + " of " + @#__logged_test_cases + " tests.",150,150,150));
    io.println();
    __logged_test_cases = array(0);
}

fn equals(a,b) {
    if(typeof(a) != typeof(b)) -> false;

    if(a is Array) -> compare_array(a,b);
    ret a == b;
}

fn compare_array(a, b) {
    if(a !is Array || b !is Array) -> false;
    if(#a != #b) -> false;
    each(rw val i,v : a) {
        if(v != b[i]) -> false;
    }
    ret true;
}