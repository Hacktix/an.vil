#[vminit;noreg] fn __arrlib_vminit() {
    // Make sure the 'arr' table exists and isn't frozen
    arr ??= {};
    tbl.unfreeze(arr);

    arr.join = fn(a,delim=',') {
        if(a !is Array) -> nil;

        rw val out = "";
        each(rw val i,v : a) {
            out += @v;
            if(i < (#a - 1))
                out += @delim;
        }
        ret out;
    };

    arr.map = fn(a,mapfun) {
        if(a !is Array || mapfun !is Function) -> nil;

        val res = array(0);
        each(rw val i,v : a) {
            arr.push(res, mapfun(v,i));
        }
        ret res;
    };

    arr.filter = fn(a,filter) {
        if(a !is Array || filter !is Function) -> nil;

        val res = array(0);
        each(rw val i,v : a) {
            if(filter(v,i)) arr.push(res, v);
        }
        ret res;
    };

    arr.reduce = fn(a,func,init) {
        if(a !is Array || func !is Function) -> nil;
        if(#a == 0) -> init;

        rw val acc = (init == nil) ? a[0] : init;
        val startIdx = (init == nil) ? 1 : 0;
        for(rw val i = startIdx; i < #a; i++) {
            acc = func(acc,a[i],i);
        }
        ret acc;
    };

    tbl.freeze(arr);
}