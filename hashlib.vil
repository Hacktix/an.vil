#include "strlib.vil"

#[vminit;noreg] fn __hashlib_vminit() {
    // Make sure the 'hash' table exists and isn't frozen
    hash ??= {};
    tbl.unfreeze(hash);

    // CRC-8
    hash.crc8 = {
        __lut: array(256),
        from_bytearray: fn(bytes) {
            if(bytes !is Array) -> nil;

            rw val crc = 0;
            each(rw val i, b : bytes) {
                crc = hash.crc8.__lut[b^crc];
            }
            ret crc;
        },
        from_string: fn(s) -> s !is String ? nil : hash.crc8.from_bytearray(str.bytes(s))
    };
    for(rw val i = 0; i < 256; i++) {
        rw val cb = i;
        for(rw val bit = 0; bit < 8; bit++) {
            if((cb & 0x80) != 0)
                cb = cnv.u8((cb << 1) ^ 0x07);
            else
                cb = cnv.u8(cb << 1);
        }
        hash.crc8.__lut[i] = cb;
    }

    tbl.freeze(hash);
}